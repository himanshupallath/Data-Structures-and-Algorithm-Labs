/*
 * Name: Himanshu Pallath
 * Date Submitted: 1/ /2023
 * Lab Section: 001
 * Assignment Name: Lab 2 - Infix to Postfix Conversion
 */

#include <iostream>
#include <string>
#include <stack>

using namespace std;

/*
Converts an infix arithmetic expression into postfix
The function takes 3 parameters
First parameter: array of strings for infix expression
    each string is either an integer number or operator symbol
Second parameter: number of strings in infix expression
Third parameter: array of strings for postfix expression
    generated by function, same format as first parameter
    assumes that postfix is at least the size of postfix
Return value: int, number of strings in postfix expression
    Returns 0 if an error is encountered when converting expression
    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
Operator symbols:
 ( : left parenthesis, all operations between this and ")" take place first
 ) : right parenthesis, all op.s back to previous "(" take place first
 * : multiplication, higher precedence - takes place before "+" and "-"
 / : division, higher precedence - takes place before "+" and "-"
 % : remainder, higher precedence - takes place before "+" and "-"
 + : addition, lower precedence - takes place after "*" , "/" , "%"
 - : subtraction, lower precedence - takes place after "*" , "/" , "%"
 
The function is not specified to work with any other operator symbols
Any string in infix may be assumed to be an integer operand if none
 of the above symbols
*/

/**
    This is the method used to convert a infix notation to postfix notation
    @param infix is an array that the infix expression
    @param length is the length of the infix array
    @param postfix an empty array where I can place the postfix expression after converted
    @return It returns the length of the postfix array
*/
int infixToPostfix(string infix[], int length, string postfix[]) {
    stack<string> oper;
    int postIndex = 0;          // Keeps track of postfix index
    int leftParenthesis = 0;    // Keeps track of the number of left parenthesis
    int rightParenthesis = 0;   // Keeps track of the number of right parenthesis
    // This loop checks for the uneven parenthesis
    for (int j = 0; j < length; j++) {
        if (infix[j] == "(") {
            leftParenthesis++;
        } else if (infix[j] == ")") {
            rightParenthesis++;
        }
        if (rightParenthesis > leftParenthesis) { return 0; }
    }
    if (rightParenthesis != leftParenthesis) { return 0; }

    // This loop converts the infix to postfix expressions
    for (int i = 0; i < length; i++) {
        // Checks it the string is number to add straight to the postfix array
        if (infix[i] != "*" && infix[i] != "/" && infix[i] != "%" && infix[i] != "+" && infix[i] != "-" && infix[i] != "(" && infix[i] != ")") {
            postfix[postIndex] = infix[i];
            postIndex++;
        } else {
            // This if statement checks for the precedence between the top of the stack 
            //   and the next string in the infix array.
            if (!oper.empty()) {
                if ((infix[i] == "+" && oper.top() == "-") ||
                    (infix[i] == "-" && oper.top() == "-") ||
                    (infix[i] == "-" && oper.top() == "+") ||
                    (infix[i] == "/" && oper.top() == "*") ||
                    (infix[i] == "*" && oper.top() == "%") ||
                    (infix[i] == "%" && oper.top() == "/") ||
                    (infix[i] == "%" && oper.top() == "*")) {
                        postfix[postIndex] = oper.top();
                        oper.pop();
                        postIndex++;
                    }
            }
            // This checks for precedence of between %, *, /, +, and -
            if (!oper.empty() && (oper.top() == "*" || oper.top() == "/" || oper.top() == "%") &&
                  (infix[i] == "+" || infix[i] == "-")) {
                // Keeps on adding to the postfix array until the while loop conditions are met
                while (!oper.empty() && oper.top() != "+" && oper.top() != "-" && oper.top() != "(") {
                    postfix[postIndex] = oper.top();
                    oper.pop();
                    postIndex++;
                }
                // When the loop ends, add the top of the stact to the postfix array
                if (!oper.empty() && oper.top() != "(") {
                    postfix[postIndex] = oper.top();
                    oper.pop();
                    postIndex++;
                }
            }
            oper.push(infix[i]); // Adds the symbol to the operator stack
        }
        // This if statement accounts for when we run into a ) in the infix array
        if (infix[i] == ")") {
            oper.pop(); // Deletes the ) from the stack
            // Loops through until the first (
            while (oper.top() != "(") {
                postfix[postIndex] = oper.top();
                postIndex++;
                oper.pop();
            }
            oper.pop(); // Deletes the ( from the stack
        }
        cout<<infix[i]<<endl;
        printOperatorAndPostfix(oper,postfix,infix);

    }
    // Once we have iterated through the whole infix array, if there are still operators in the
    //  operator stack, add them all to the end of the postfix array
    if (!oper.empty()) {
        while (!oper.empty()) {
            if (oper.top() != ")" && oper.top() != "(") {
                postfix[postIndex] = oper.top();
                oper.pop();
                postIndex++;
            } else {
                oper.pop();
            }
        }
    }
    // Returns the size of the infix array
    return postIndex;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +

// postfix: [2 3 4 * + 5 6 7 + - 8 * +]
/*
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(", "5", "-", "6", "+", "7", ")", "*", "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
*/